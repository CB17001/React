{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/errors/ValidationErrors.tsx","features/users/LoginForm.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/options/categoryOptions.ts","features/activities/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","console","log","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","profile","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","ValidateErrors","Message","err","i","initialValues","email","password","onSubmit","setErrors","validationSchema","Yup","required","handleSubmit","isSubmitting","isValid","dirty","className","autoComplete","placeholder","type","render","display","userName","IsLoggedIn","LoadingComponent","Dimmer","MyTextArea","categoryOptions","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFromSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","panes","menuItem","pane","Tab","Pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.e796bc5d.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages : number\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios'\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\n//proxy\r\n//axios.defaults.baseURL = 'http://localhost:3000/api';\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n        const pagination = response.headers['pagination'];\r\n        if (pagination) {\r\n            response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n            return response as AxiosResponse<PaginatedResult<any>>\r\n        }\r\n        return response;\r\n\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = []\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                        console.log(data.errors)\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n\r\n            }  else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id:string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id:string) => requests.del(`/photos/${id}`),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n\r\n\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n  }\r\n\r\n  export class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n      Object.assign(this, init);\r\n    }\r\n  }\r\n\r\n  export class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n      if (activity) {\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.venue = activity.venue;\r\n        this.city = activity.city;\r\n      }\r\n    }\r\n  }","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[]\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport {format} from 'date-fns'\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all' :\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing' :\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost' :\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                    this.predicate.delete('startDate');\r\n                    this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \r\n            a.date!.getTime() - b.date!.getTime()); //work in the order by date\r\n    }\r\n\r\n    get groupActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date =format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity\r\n                })\r\n                this.setLoadingInitial(false)\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity};\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction (\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following'\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo =  response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !==photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get IsLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n\r\n}\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', comment => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n\r\n                }) \r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react'\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const {userStore: {user, logout}} =useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\r\n                    React\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity2' positive content='React Hooks Form' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \r\n                                text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n                \r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport Calendar from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n        <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\r\n            <Header icon='filter' attached color='teal' content='Filters' />\r\n            <Menu.Item \r\n                content='All activities' \r\n                active={predicate.has('all')}\r\n                onClick={() => setPredicate('all', 'true')}\r\n            />\r\n            <Menu.Item \r\n                content=\"I'm going\" \r\n                active={predicate.has('isGoing')}\r\n                onClick={() => setPredicate('isGoing', 'true')} \r\n            />\r\n            <Menu.Item \r\n                content=\"I'm hosting\" \r\n                active={predicate.has('isHost')}\r\n                onClick={() => setPredicate('isHost', 'true')} \r\n            />\r\n        </Menu>\r\n        <Header />\r\n        <Calendar \r\n            onChange={(date) => setPredicate('startDate', date as Date)}\r\n            value={predicate.get('startDate') || new Date()}\r\n        />\r\n        </>\r\n        \r\n        \r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent } from 'react'\r\nimport { Button, Reveal } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const{updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not following'} \r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'} \r\n                    content={profile.following ? 'Unfollowed' : 'Follow'} \r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props) {\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`} >\r\n            <Image src={profile.image || 'assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>Bio goes here</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { List, Image, Popup } from 'semantic-ui-react'\r\nimport { Profile } from '../../../app/models/profile'\r\nimport ProfileCard from '../../profiles/ProfileCard'\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                                size='mini' \r\n                                circular src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n\r\n                </Popup>\r\n                \r\n            ))}\r\n        </List>\r\n    )\r\n})","import { Link } from 'react-router-dom'\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport {format} from 'date-fns'\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            \r\n                            {activity.isGoing && !activity.isHost &&(\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const {activityStore} = useStore();\r\n    const {groupActivities} = activityStore;\r\n    \r\n\r\n    return (\r\n        <>\r\n            {groupActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal' >\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react'\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react'\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList'\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities]);\r\n\r\n    return <Grid>\r\n        <Grid.Column width='10'>\r\n            {activityStore.loadingInitial && !loadingNext ? (\r\n                <>\r\n                    <ActivityListItemPlaceholder />\r\n                    <ActivityListItemPlaceholder />\r\n                </>\r\n            ) : (\r\n                <InfiniteScroll\r\n                    pageStart={0}\r\n                    loadMore={handleGetNext}\r\n                    hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                    initialLoad={false}\r\n                >\r\n                    <ActivityList />\r\n                </InfiniteScroll>\r\n            )}\r\n        </Grid.Column>\r\n        <Grid.Column width='6'>\r\n            <ActivityFilters />\r\n        </Grid.Column>\r\n        <Grid.Column width={10}>\r\n            <Loader active={loadingNext} />\r\n        </Grid.Column>\r\n    </Grid>;\r\n})","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string\r\n    type?: string\r\n    label?: string\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { Message } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\nexport default function ValidateErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Button, Header } from 'semantic-ui-react'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => setErrors({error}))}\r\n\r\n            validationSchema = {Yup.object({\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to React'color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() => \r\n                            <ValidationErrors errors={errors.error}/>} \r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Button, Header } from 'semantic-ui-react'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{display: '',username: '',  email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n\r\n            validationSchema = {Yup.object({\r\n                displayName: Yup.string().required(),\r\n                userName: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to React'color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='userName' placeholder='User Name' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Container, Header, Image, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const {userStore, modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                    React\r\n                </Header>\r\n                {userStore.IsLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to React' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                    \r\n                ) : (\r\n                    <>\r\n                    <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                        Login!\r\n                    </Button>\r\n                    <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register!\r\n                    </Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string\r\n    rows: number\r\n    label?: string\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string\r\n    options: any\r\n    label?: string\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable \r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)} \r\n                placeholder={props.placeholder}\r\n            \r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker'\r\n\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            \r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Button, Header, Segment } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MySelectInput from './MySelectInput';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required('The activity category is required'),\r\n        date: Yup.string().required('The activity date is required').nullable(),\r\n        city: Yup.string().required('The activity city is required'),\r\n        venue: Yup.string().required('The activity venue is required'),\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFromSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFromSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n                        <MyTextInput placeholder='Title' name='title' />\r\n                        <MyTextArea rows={4} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date' \r\n                            name='date' \r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Loacation Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive type='submit' \r\n                            content='Submit' \r\n                        />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Field, FieldProps, Form } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik onSubmit={(values, {resetForm}) => \r\n                    commentStore.addComment(values).then(() => resetForm())}\r\n                        initialValues={{body: ''}}\r\n                        validationSchema={Yup.object({\r\n                            body: Yup.string().required()\r\n                        })}\r\n                >\r\n                    {({isSubmitting, isValid, handleSubmit}) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{position: 'relative'}}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit()\r\n                                                }\r\n                                            }}\r\n\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.username}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}} >{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button \r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'} \r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link} \r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' \r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled} \r\n                        loading={loading} onClick={updateAttendance} color='teal'>\r\n                            Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host} }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going \r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react'\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer(function ActivityDetails() {\r\n\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n    //proxy\r\n    //const baseUrl = 'http://localhost:3000/api/'\r\n    const [errors, setErrors] = useState(null)\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            \r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, {  } from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { format } from \"date-fns\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n  { menuItem: \"Future Events\", pane: { key: \"future\" } },\r\n  { menuItem: \"Past Events\", pane: { key: \"past\" } },\r\n  { menuItem: \"Hosting\", pane: { key: \"hosting\" } },\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n  const { profileStore } = useStore();\r\n  const {\r\n    loadUserActivities,\r\n    profile,\r\n    loadingActivities,\r\n    userActivities,\r\n  } = profileStore;\r\n\r\n  useEffect(() => {\r\n    loadUserActivities(profile!.username);\r\n  }, [loadUserActivities, profile]);\r\n\r\n  const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n    loadUserActivities(\r\n      profile!.username,\r\n      panes[data.activeIndex as number].pane.key\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Tab.Pane loading={loadingActivities}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated=\"left\" icon=\"calendar\" content={\"Activities\"} />\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Tab\r\n            panes={panes}\r\n            menu={{ secondary: true, pointing: true }}\r\n            onTabChange={(e, data) => handleTabChange(e, data)}\r\n          />\r\n          <br />\r\n          <Card.Group itemsPerRow={4}>\r\n            {userActivities.map((activity: UserActivity) => (\r\n              <Card\r\n                as={Link}\r\n                to={`/activities/${activity.id}`}\r\n                key={activity.id}\r\n              >\r\n                <Image\r\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                  style={{ minHeight: 100, objectFit: \"cover\" }}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header textAlign=\"center\">{activity.title}</Card.Header>\r\n                  <Card.Meta textAlign=\"center\">\r\n                    <div>{format(new Date(activity.date), \"do LLL\")}</div>\r\n                    <div>{format(new Date(activity.date), \"h:mm a\")}</div>\r\n                  </Card.Meta>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n});\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' \r\n                        icon='user'\r\n                        content={activeTab === 3 ? `People following ${profile!.displayName}` : `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16} >\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react'\r\nimport { Cropper } from 'react-cropper'\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n   setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n      const dzStyles = {\r\n      border: 'dashed 3px #eee',\r\n      borderColor: '#eee',\r\n      borderRadius: '5px',\r\n      paddingTop: '30px',\r\n      textAlign: 'center' as 'center',\r\n      height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n      borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n          preview: URL.createObjectURL(file)\r\n        })));\r\n    }, [setFiles])\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\r\n          <input {...getInputProps()} />\r\n          <Icon name='upload' size='huge' />\r\n          <Header content='Drop image here' />\r\n        </div>\r\n      )\r\n}","import { useEffect, useState } from 'react'\r\nimport { Button, Grid, Header } from 'semantic-ui-react'\r\nimport PhotWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone'\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return() => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 1 -Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 2 -Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 3 -Preview & Upload Photo' />\r\n                {files && files.length > 0 && \r\n                <>\r\n                    <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}} />\r\n                    <Button.Group width={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useState } from 'react'\r\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react'\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget'\r\nimport { Photo, Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}: Props) {\r\n    const {profileStore: {isCurrentUser, uploadPhoto, \r\n            uploading, loading, setMainPhoto, deletePhoto }} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' \r\n                            basic content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2} >\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main ' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main ' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button \r\n                                                basic \r\n                                                color='red' \r\n                                                icon='trash' \r\n                                                name={photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport { Tab } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileActivities from './ProfileActivities'\r\nimport ProfileFollowings from './ProfileFollowings'\r\nimport ProfilePhotos from './ProfilePhotos'\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <Tab.Pane>About Content</Tab.Pane>},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Follower', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../app/layout/LoadingComponent'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileContent from './ProfileContent'\r\nimport ProfileHeader from './ProfileHeader'\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                <>\r\n                    <ProfileHeader profile={profile} />\r\n                    <ProfileContent profile={profile} />\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps{\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const { userStore: {IsLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => IsLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import { Container, } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{marginTop: '7em'}}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from 'react'\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}